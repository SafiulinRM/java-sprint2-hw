Index: service/HttpTaskManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package service;\n\nimport model.*;\n\nimport java.net.URI;\n\npublic class HttpTaskManager extends FileBackedTasksManager {\n    public  KVTaskClient client;\n    private static final String KEY_GREEN = \"зеленый\";\n    private URI uri;\n    private String url;\n\n    public HttpTaskManager(String url) {\n        super(url);\n        this.url = url;\n        this.uri = URI.create(url);\n        client = new KVTaskClient(this.uri);\n    }\n\n    @Override\n    public void save() {\n        client.put(KEY_GREEN, this);\n    }\n\n    @Override\n    public String toString() {\n        return \"HttpTaskManager{\" +\n                \"client=\" + client +\n                \", uri=\" + uri +\n                \", url='\" + url + '\\'' +\n                \", prioritizedTasks=\" + prioritizedTasks +\n                '}';\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/service/HttpTaskManager.java b/service/HttpTaskManager.java
--- a/service/HttpTaskManager.java	(revision 7092b805663452d17e3cd4a3d78b4891dcb74bf3)
+++ b/service/HttpTaskManager.java	(date 1653985350206)
@@ -1,7 +1,5 @@
 package service;
 
-import model.*;
-
 import java.net.URI;
 
 public class HttpTaskManager extends FileBackedTasksManager {
Index: test/service/HttpTaskManagerTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package test.service;\n\nimport api.HttpTaskServer;\nimport api.KVServer;\nimport com.google.gson.Gson;\nimport org.junit.jupiter.api.AfterEach;\nimport org.junit.jupiter.api.BeforeEach;\nimport service.HttpTaskManager;\nimport service.Managers;\n\nimport java.io.IOException;\n\npublic class HttpTaskManagerTest extends TaskManagerTest<HttpTaskManager> {\n\n    KVServer server;\n    HttpTaskServer httpTaskServer;\n\n\n    public HttpTaskManagerTest() throws IOException, InterruptedException {\n        super(Managers.getDefault());\n        server = new KVServer();\n    }\n\n    @Override\n    @BeforeEach\n    public void beforeEach() {\n        server.start();\n        generator.setCounterId(0);\n        manager.removeAll();\n    }\n\n    @AfterEach\n    public void makeAfterTest() {\n        server.stop();\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/test/service/HttpTaskManagerTest.java b/test/service/HttpTaskManagerTest.java
--- a/test/service/HttpTaskManagerTest.java	(revision 7092b805663452d17e3cd4a3d78b4891dcb74bf3)
+++ b/test/service/HttpTaskManagerTest.java	(date 1653985350214)
@@ -1,8 +1,6 @@
 package test.service;
 
-import api.HttpTaskServer;
 import api.KVServer;
-import com.google.gson.Gson;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
 import service.HttpTaskManager;
@@ -11,10 +9,7 @@
 import java.io.IOException;
 
 public class HttpTaskManagerTest extends TaskManagerTest<HttpTaskManager> {
-
     KVServer server;
-    HttpTaskServer httpTaskServer;
-
 
     public HttpTaskManagerTest() throws IOException, InterruptedException {
         super(Managers.getDefault());
Index: test/api/HttpTaskServerTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package test.api;\n\nimport api.HttpTaskServer;\nimport api.KVServer;\nimport com.google.gson.Gson;\nimport com.google.gson.GsonBuilder;\nimport model.*;\nimport org.junit.jupiter.api.AfterEach;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport service.*;\n\nimport java.io.IOException;\nimport java.net.URI;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.time.LocalDateTime;\nimport java.util.*;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nclass HttpTaskServerTest {\n    public static final int PORT = 8080;\n    public static final String TASK_NOT_REMOVE = \"Задача не удалилась\";\n    public static final String TASK_NOT_CREATE = \"Задача не создалась\";\n    public static final String NAME = \"task\";\n    public static final long DURATION_MS = 100;\n    public static final LocalDateTime START_TIME_1 = LocalDateTime.of(2022, 6, 1, 0, 0);\n    public static final LocalDateTime START_TIME_2 = LocalDateTime.of(2022, 6, 1, 1, 1);\n    public IdGenerator generator = new IdGenerator();\n    String url = \"http://localhost:\" + PORT;\n    private HttpTaskManager taskManager;\n    HttpClient client = HttpClient.newHttpClient();\n    HttpTaskServer httpTaskServer;\n    KVServer kvServer;\n\n    @BeforeEach\n    void startServers() throws IOException {\n        kvServer = new KVServer();\n        kvServer.start();\n        taskManager = Managers.getDefault();\n        httpTaskServer = new HttpTaskServer();\n        httpTaskServer.startServer();\n        generator.setCounterId(0);\n    }\n\n    @AfterEach\n    void stopServers() {\n        kvServer.stop();\n        httpTaskServer.stop();\n    }\n\n    @Test\n    void createTask() throws IOException, InterruptedException {\n        Task task = new Task(generator.generate(), NAME, Status.NEW, DURATION_MS, START_TIME_1);\n        GsonBuilder gsonBuilder = new GsonBuilder();\n        gsonBuilder.serializeNulls()\n                .registerTypeAdapter(AbstractTask.class, new AbstractElementAdapter());\n        Gson gson = gsonBuilder.create();\n        URI urlTask = URI.create(url + \"/tasks/task\");\n        HttpRequest.BodyPublisher body = HttpRequest.BodyPublishers.ofString(gson.toJson(task));\n        HttpRequest request = HttpRequest.newBuilder()\n                .uri(urlTask)\n                .version(HttpClient.Version.HTTP_1_1)\n                .POST(body)\n                .build();\n        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());\n        assertEquals(201, response.statusCode());\n        assertEquals(task, taskManager.getTask(1), TASK_NOT_CREATE);\n    }\n\n    @Test\n    void getNewHistory() throws IOException, InterruptedException {\n        Task task = new Task(generator.generate(), NAME, Status.NEW, DURATION_MS, START_TIME_1);\n        GsonBuilder gsonBuilder = new GsonBuilder();\n        gsonBuilder.serializeNulls()\n                .registerTypeAdapter(AbstractTask.class, new AbstractElementAdapter());\n        Gson gson = gsonBuilder.create();\n        URI urlTask = URI.create(url + \"/tasks/task\");\n        HttpRequest.BodyPublisher body = HttpRequest.BodyPublishers.ofString(gson.toJson(task));\n        HttpRequest request = HttpRequest.newBuilder()\n                .uri(urlTask)\n                .version(HttpClient.Version.HTTP_1_1)\n                .POST(body)\n                .build();\n        client.send(request, HttpResponse.BodyHandlers.ofString());\n        URI urlTaskGet = URI.create(url + \"/tasks/task?id=1\");\n        HttpRequest requestGet = HttpRequest.newBuilder()\n                .uri(urlTaskGet)\n                .version(HttpClient.Version.HTTP_1_1)\n                .GET()\n                .build();\n        client.send(requestGet, HttpResponse.BodyHandlers.ofString());\n        URI urlHistory = URI.create(url + \"/tasks/history\");\n        HttpRequest requestHistory = HttpRequest.newBuilder()\n                .uri(urlHistory)\n                .version(HttpClient.Version.HTTP_1_1)\n                .GET()\n                .build();\n        HttpResponse<String> response = client.send(requestHistory, HttpResponse.BodyHandlers.ofString());\n        assertEquals(200, response.statusCode());\n        assertEquals(1, gson.fromJson(response.body(), List.class).size());\n    }\n\n    @Test\n    void createSubtask() throws IOException, InterruptedException {\n        GsonBuilder gsonBuilder = new GsonBuilder();\n        gsonBuilder.serializeNulls()\n                .registerTypeAdapter(AbstractTask.class, new AbstractElementAdapter());\n        Gson gson = gsonBuilder.create();\n        Epic epic = new Epic(generator.generate(), NAME, Status.NEW);\n        URI urlEpic = URI.create(url + \"/tasks/epic\");\n        HttpRequest.BodyPublisher bodyEpic = HttpRequest.BodyPublishers.ofString(gson.toJson(epic));\n        HttpRequest requestEpic = HttpRequest.newBuilder()\n                .uri(urlEpic)\n                .version(HttpClient.Version.HTTP_1_1)\n                .POST(bodyEpic)\n                .build();\n        client.send(requestEpic, HttpResponse.BodyHandlers.ofString());\n        Subtask subtask = new Subtask(generator.generate(), NAME, Status.NEW, DURATION_MS, START_TIME_1, epic.getId());\n        URI urlSubtask = URI.create(url + \"/tasks/subtask\");\n        HttpRequest.BodyPublisher body = HttpRequest.BodyPublishers.ofString(gson.toJson(subtask));\n        HttpRequest request = HttpRequest.newBuilder()\n                .uri(urlSubtask)\n                .version(HttpClient.Version.HTTP_1_1)\n                .POST(body)\n                .build();\n        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());\n        assertEquals(201, response.statusCode());\n        assertEquals(subtask, taskManager.getSubtask(2), TASK_NOT_CREATE);\n    }\n\n    @Test\n    void createEpic() throws IOException, InterruptedException {\n        Epic epic = new Epic(generator.generate(), NAME, Status.NEW);\n        GsonBuilder gsonBuilder = new GsonBuilder();\n        gsonBuilder.serializeNulls()\n                .registerTypeAdapter(AbstractTask.class, new AbstractElementAdapter());\n        Gson gson = gsonBuilder.create();\n        URI urlEpic = URI.create(url + \"/tasks/epic\");\n        HttpRequest.BodyPublisher body = HttpRequest.BodyPublishers.ofString(gson.toJson(epic));\n        HttpRequest request = HttpRequest.newBuilder()\n                .uri(urlEpic)\n                .version(HttpClient.Version.HTTP_1_1)\n                .POST(body)\n                .build();\n        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());\n        assertEquals(201, response.statusCode());\n        assertEquals(epic, taskManager.getEpic(1), TASK_NOT_CREATE);\n    }\n\n    @Test\n    void removeEpic() throws IOException, InterruptedException {\n        Epic epic = new Epic(generator.generate(), NAME, Status.NEW);\n        GsonBuilder gsonBuilder = new GsonBuilder();\n        gsonBuilder.serializeNulls()\n                .registerTypeAdapter(AbstractTask.class, new AbstractElementAdapter());\n        Gson gson = gsonBuilder.create();\n        URI urlEpic = URI.create(url + \"/tasks/epic\");\n        HttpRequest.BodyPublisher body = HttpRequest.BodyPublishers.ofString(gson.toJson(epic));\n        HttpRequest request = HttpRequest.newBuilder()\n                .uri(urlEpic)\n                .version(HttpClient.Version.HTTP_1_1)\n                .POST(body)\n                .build();\n        client.send(request, HttpResponse.BodyHandlers.ofString());\n        URI urlEpicDelete = URI.create(url + \"/tasks/epic?id=1\");\n        HttpRequest requestDelete = HttpRequest.newBuilder()\n                .uri(urlEpicDelete)\n                .version(HttpClient.Version.HTTP_1_1)\n                .DELETE()\n                .build();\n        HttpResponse<String> responseDelete = client.send(requestDelete, HttpResponse.BodyHandlers.ofString());\n        assertEquals(202, responseDelete.statusCode());\n        assertEquals(0, taskManager.getEpics().size(), TASK_NOT_REMOVE);\n    }\n\n    @Test\n    void removeSubtask() throws IOException, InterruptedException {\n        GsonBuilder gsonBuilder = new GsonBuilder();\n        gsonBuilder.serializeNulls()\n                .registerTypeAdapter(AbstractTask.class, new AbstractElementAdapter());\n        Gson gson = gsonBuilder.create();\n        Epic epic = new Epic(generator.generate(), NAME, Status.NEW);\n        URI urlEpic = URI.create(url + \"/tasks/epic\");\n        HttpRequest.BodyPublisher bodyEpic = HttpRequest.BodyPublishers.ofString(gson.toJson(epic));\n        HttpRequest requestEpic = HttpRequest.newBuilder()\n                .uri(urlEpic)\n                .version(HttpClient.Version.HTTP_1_1)\n                .POST(bodyEpic)\n                .build();\n        client.send(requestEpic, HttpResponse.BodyHandlers.ofString());\n        Subtask subtask = new Subtask(generator.generate(), NAME, Status.NEW, DURATION_MS, START_TIME_1, epic.getId());\n        URI urlSubtask = URI.create(url + \"/tasks/subtask\");\n        HttpRequest.BodyPublisher body = HttpRequest.BodyPublishers.ofString(gson.toJson(subtask));\n        HttpRequest request = HttpRequest.newBuilder()\n                .uri(urlSubtask)\n                .version(HttpClient.Version.HTTP_1_1)\n                .POST(body)\n                .build();\n        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());\n        URI urlSubtaskDelete = URI.create(url + \"/tasks/subtask?id=2\");\n        HttpRequest requestDelete = HttpRequest.newBuilder()\n                .uri(urlSubtaskDelete)\n                .version(HttpClient.Version.HTTP_1_1)\n                .DELETE()\n                .build();\n        HttpResponse<String> responseDelete = client.send(requestDelete, HttpResponse.BodyHandlers.ofString());\n        assertEquals(202, responseDelete.statusCode());\n        assertEquals(0, taskManager.getSubtasks().size(), TASK_NOT_REMOVE);\n    }\n\n    @Test\n    void removeTask() throws IOException, InterruptedException {\n        Task task = new Task(generator.generate(), NAME, Status.NEW, DURATION_MS, START_TIME_1);\n        GsonBuilder gsonBuilder = new GsonBuilder();\n        gsonBuilder.serializeNulls()\n                .registerTypeAdapter(AbstractTask.class, new AbstractElementAdapter());\n        Gson gson = gsonBuilder.create();\n        URI urlTask = URI.create(url + \"/tasks/task\");\n        HttpRequest.BodyPublisher body = HttpRequest.BodyPublishers.ofString(gson.toJson(task));\n        HttpRequest request = HttpRequest.newBuilder()\n                .uri(urlTask)\n                .version(HttpClient.Version.HTTP_1_1)\n                .POST(body)\n                .build();\n        client.send(request, HttpResponse.BodyHandlers.ofString());\n        URI urlTaskDelete = URI.create(url + \"/tasks/task?id=1\");\n        HttpRequest requestDelete = HttpRequest.newBuilder()\n                .uri(urlTaskDelete)\n                .version(HttpClient.Version.HTTP_1_1)\n                .DELETE()\n                .build();\n        HttpResponse<String> responseDelete = client.send(requestDelete, HttpResponse.BodyHandlers.ofString());\n        assertEquals(202, responseDelete.statusCode());\n        assertEquals(0, taskManager.getTasks().size(), TASK_NOT_REMOVE);\n    }\n\n    @Test\n    void getTask() throws IOException, InterruptedException {\n        Task task = new Task(generator.generate(), NAME, Status.NEW, DURATION_MS, START_TIME_1);\n        GsonBuilder gsonBuilder = new GsonBuilder();\n        gsonBuilder.serializeNulls()\n                .registerTypeAdapter(AbstractTask.class, new AbstractElementAdapter());\n        Gson gson = gsonBuilder.create();\n        URI urlTask = URI.create(url + \"/tasks/task\");\n        HttpRequest.BodyPublisher body = HttpRequest.BodyPublishers.ofString(gson.toJson(task));\n        HttpRequest request = HttpRequest.newBuilder()\n                .uri(urlTask)\n                .version(HttpClient.Version.HTTP_1_1)\n                .POST(body)\n                .build();\n        client.send(request, HttpResponse.BodyHandlers.ofString());\n        URI urlTaskGet = URI.create(url + \"/tasks/task?id=1\");\n        HttpRequest requestGet = HttpRequest.newBuilder()\n                .uri(urlTaskGet)\n                .version(HttpClient.Version.HTTP_1_1)\n                .GET()\n                .build();\n        HttpResponse<String> response = client.send(requestGet, HttpResponse.BodyHandlers.ofString());\n        assertEquals(200, response.statusCode());\n        assertEquals(task, gson.fromJson(response.body(), Task.class));\n    }\n\n    @Test\n    void getEpic() throws IOException, InterruptedException {\n        Epic epic = new Epic(generator.generate(), NAME, Status.NEW);\n        GsonBuilder gsonBuilder = new GsonBuilder();\n        gsonBuilder.serializeNulls()\n                .registerTypeAdapter(AbstractTask.class, new AbstractElementAdapter());\n        Gson gson = gsonBuilder.create();\n        URI urlEpic = URI.create(url + \"/tasks/epic\");\n        HttpRequest.BodyPublisher body = HttpRequest.BodyPublishers.ofString(gson.toJson(epic));\n        HttpRequest request = HttpRequest.newBuilder()\n                .uri(urlEpic)\n                .version(HttpClient.Version.HTTP_1_1)\n                .POST(body)\n                .build();\n        client.send(request, HttpResponse.BodyHandlers.ofString());\n        Subtask subtask = new Subtask(generator.generate(), NAME, Status.NEW, DURATION_MS, START_TIME_1, epic.getId());\n        URI urlSubtask = URI.create(url + \"/tasks/subtask\");\n        HttpRequest.BodyPublisher bodySubtask = HttpRequest.BodyPublishers.ofString(gson.toJson(subtask));\n        HttpRequest requestSubtask = HttpRequest.newBuilder()\n                .uri(urlSubtask)\n                .version(HttpClient.Version.HTTP_1_1)\n                .POST(bodySubtask)\n                .build();\n        client.send(requestSubtask, HttpResponse.BodyHandlers.ofString());\n        URI urlEpicGet = URI.create(url + \"/tasks/epic?id=1\");\n        HttpRequest requestGet = HttpRequest.newBuilder()\n                .uri(urlEpicGet)\n                .version(HttpClient.Version.HTTP_1_1)\n                .GET()\n                .build();\n        HttpResponse<String> response = client.send(requestGet, HttpResponse.BodyHandlers.ofString());\n        assertEquals(200, response.statusCode());\n        assertEquals(1, gson.fromJson(response.body(), List.class).size());\n    }\n\n    @Test\n    void getPrioritizedTasks() throws IOException, InterruptedException {\n        Task task = new Task(generator.generate(), NAME, Status.NEW, DURATION_MS, START_TIME_1);\n        GsonBuilder gsonBuilder = new GsonBuilder();\n        gsonBuilder.serializeNulls()\n                .registerTypeAdapter(AbstractTask.class, new AbstractElementAdapter());\n        Gson gson = gsonBuilder.create();\n        URI urlTask = URI.create(url + \"/tasks/task\");\n        HttpRequest.BodyPublisher body = HttpRequest.BodyPublishers.ofString(gson.toJson(task));\n        HttpRequest request = HttpRequest.newBuilder()\n                .uri(urlTask)\n                .version(HttpClient.Version.HTTP_1_1)\n                .POST(body)\n                .build();\n        client.send(request, HttpResponse.BodyHandlers.ofString());\n        URI urlTasksGet = URI.create(url + \"/tasks\");\n        HttpRequest requestGet = HttpRequest.newBuilder()\n                .uri(urlTasksGet)\n                .version(HttpClient.Version.HTTP_1_1)\n                .GET()\n                .build();\n        HttpResponse<String> response = client.send(requestGet, HttpResponse.BodyHandlers.ofString());\n        assertEquals(200, response.statusCode());\n        assertEquals(1, gson.fromJson(response.body(), Set.class).size());\n    }\n\n    @Test\n    void removeAll() throws IOException, InterruptedException {\n        Epic epic = new Epic(generator.generate(), NAME, Status.NEW);\n        GsonBuilder gsonBuilder = new GsonBuilder();\n        gsonBuilder.serializeNulls()\n                .registerTypeAdapter(AbstractTask.class, new AbstractElementAdapter());\n        Gson gson = gsonBuilder.create();\n        URI urlEpic = URI.create(url + \"/tasks/epic\");\n        HttpRequest.BodyPublisher body = HttpRequest.BodyPublishers.ofString(gson.toJson(epic));\n        HttpRequest request = HttpRequest.newBuilder()\n                .uri(urlEpic)\n                .version(HttpClient.Version.HTTP_1_1)\n                .POST(body)\n                .build();\n        client.send(request, HttpResponse.BodyHandlers.ofString());\n        Subtask subtask = new Subtask(generator.generate(), NAME, Status.NEW, DURATION_MS, START_TIME_1, epic.getId());\n        URI urlSubtask = URI.create(url + \"/tasks/subtask\");\n        HttpRequest.BodyPublisher bodySubtask = HttpRequest.BodyPublishers.ofString(gson.toJson(subtask));\n        HttpRequest requestSubtask = HttpRequest.newBuilder()\n                .uri(urlSubtask)\n                .version(HttpClient.Version.HTTP_1_1)\n                .POST(bodySubtask)\n                .build();\n        client.send(requestSubtask, HttpResponse.BodyHandlers.ofString());\n        Task task = new Task(generator.generate(), NAME, Status.NEW, DURATION_MS, START_TIME_2);\n        URI urlTask = URI.create(url + \"/tasks/task\");\n        HttpRequest.BodyPublisher bodyTask = HttpRequest.BodyPublishers.ofString(gson.toJson(task));\n        HttpRequest requestTask = HttpRequest.newBuilder()\n                .uri(urlTask)\n                .version(HttpClient.Version.HTTP_1_1)\n                .POST(bodyTask)\n                .build();\n        client.send(requestTask, HttpResponse.BodyHandlers.ofString());\n        URI urlTasksDelete = URI.create(url + \"/tasks\");\n        HttpRequest requestDelete = HttpRequest.newBuilder()\n                .uri(urlTasksDelete)\n                .version(HttpClient.Version.HTTP_1_1)\n                .DELETE()\n                .build();\n        HttpResponse<String> response = client.send(requestDelete, HttpResponse.BodyHandlers.ofString());\n        assertEquals(202, response.statusCode());\n        assertEquals(0, gson.fromJson(response.body(), Set.class).size());\n    }\n\n    @Test\n    void getTasks() throws IOException, InterruptedException {\n        Task task = new Task(generator.generate(), NAME, Status.NEW, DURATION_MS, START_TIME_1);\n        GsonBuilder gsonBuilder = new GsonBuilder();\n        gsonBuilder.serializeNulls()\n                .registerTypeAdapter(AbstractTask.class, new AbstractElementAdapter());\n        Gson gson = gsonBuilder.create();\n        URI urlTask = URI.create(url + \"/tasks/task\");\n        HttpRequest.BodyPublisher body = HttpRequest.BodyPublishers.ofString(gson.toJson(task));\n        HttpRequest request = HttpRequest.newBuilder()\n                .uri(urlTask)\n                .version(HttpClient.Version.HTTP_1_1)\n                .POST(body)\n                .build();\n        client.send(request, HttpResponse.BodyHandlers.ofString());\n        URI urlTasksGet = URI.create(url + \"/tasks/task\");\n        HttpRequest requestGet = HttpRequest.newBuilder()\n                .uri(urlTasksGet)\n                .version(HttpClient.Version.HTTP_1_1)\n                .GET()\n                .build();\n        HttpResponse<String> response = client.send(requestGet, HttpResponse.BodyHandlers.ofString());\n        assertEquals(200, response.statusCode());\n        assertEquals(1, gson.fromJson(response.body(), Map.class).size());\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/test/api/HttpTaskServerTest.java b/test/api/HttpTaskServerTest.java
--- a/test/api/HttpTaskServerTest.java	(revision 7092b805663452d17e3cd4a3d78b4891dcb74bf3)
+++ b/test/api/HttpTaskServerTest.java	(date 1653985350222)
@@ -36,13 +36,20 @@
     KVServer kvServer;
 
     @BeforeEach
-    void startServers() throws IOException {
+    void startServers() throws IOException, InterruptedException {
         kvServer = new KVServer();
         kvServer.start();
         taskManager = Managers.getDefault();
         httpTaskServer = new HttpTaskServer();
         httpTaskServer.startServer();
         generator.setCounterId(0);
+        URI urlTasksDelete = URI.create(url + "/tasks");
+        HttpRequest requestDelete = HttpRequest.newBuilder()
+                .uri(urlTasksDelete)
+                .version(HttpClient.Version.HTTP_1_1)
+                .DELETE()
+                .build();
+        HttpResponse<String> response = client.send(requestDelete, HttpResponse.BodyHandlers.ofString());
     }
 
     @AfterEach
Index: service/KVTaskClient.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package service;\n\nimport com.google.gson.Gson;\nimport com.google.gson.GsonBuilder;\nimport model.AbstractTask;\n\nimport java.io.IOException;\nimport java.net.URI;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\n\npublic class KVTaskClient {\n    private URI url;\n    private HttpClient client;\n    private String apiTokenClient;\n\n    public KVTaskClient(URI url) {\n        this.url = url;\n        client = HttpClient.newHttpClient();\n        register();\n    }\n\n    private void register() {\n        HttpRequest request = HttpRequest.newBuilder().uri(url).GET().build();\n        try {\n            HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());\n            apiTokenClient = response.body();\n        } catch (IOException | InterruptedException e) {\n            e.getMessage();\n        }\n    }\n\n    public void put(String key, HttpTaskManager manager) {\n        GsonBuilder gsonBuilder = new GsonBuilder();\n        gsonBuilder.serializeNulls();\n        Gson gson = gsonBuilder.create();\n        URI urlSave = URI.create(\"http://localhost:8078/save/\" + key + \"?apiTokenClient=\" + apiTokenClient);\n        System.out.println(manager);\n        String a = gson.toJson(manager);\n        HttpRequest.BodyPublisher body = HttpRequest.BodyPublishers.ofString(a);\n        HttpRequest request = HttpRequest.newBuilder().uri(urlSave).POST(body).build();\n        try {\n            client.send(request, HttpResponse.BodyHandlers.ofString());\n        } catch (IOException | InterruptedException e) {\n            e.getMessage();\n        }\n    }\n\n    public HttpTaskManager load(String key) {\n        GsonBuilder gsonBuilder = new GsonBuilder();\n        gsonBuilder.serializeNulls()\n                .registerTypeAdapter(AbstractTask.class, new AbstractElementAdapter());\n        Gson gson = gsonBuilder.create();\n        URI urlLoad = URI.create(\"http://localhost:8078/load/\" + key + \"?apiTokenClient=\" + apiTokenClient);\n        HttpRequest request = HttpRequest.newBuilder().uri(urlLoad).GET().build();\n        try {\n            HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());\n            if (response.statusCode() == 200) {\n                return gson.fromJson(response.body(), HttpTaskManager.class);\n            }\n        } catch (IOException | InterruptedException e) {\n            e.getMessage();\n        }\n        return null;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/service/KVTaskClient.java b/service/KVTaskClient.java
--- a/service/KVTaskClient.java	(revision 7092b805663452d17e3cd4a3d78b4891dcb74bf3)
+++ b/service/KVTaskClient.java	(date 1653985350230)
@@ -12,8 +12,8 @@
 
 public class KVTaskClient {
     private URI url;
-    private HttpClient client;
-    private String apiTokenClient;
+    private static HttpClient client;
+    private static String apiTokenClient;
 
     public KVTaskClient(URI url) {
         this.url = url;
@@ -31,7 +31,7 @@
         }
     }
 
-    public void put(String key, HttpTaskManager manager) {
+    public static void put(String key, HttpTaskManager manager) {
         GsonBuilder gsonBuilder = new GsonBuilder();
         gsonBuilder.serializeNulls();
         Gson gson = gsonBuilder.create();
@@ -47,7 +47,7 @@
         }
     }
 
-    public HttpTaskManager load(String key) {
+    public static HttpTaskManager load(String key) {
         GsonBuilder gsonBuilder = new GsonBuilder();
         gsonBuilder.serializeNulls()
                 .registerTypeAdapter(AbstractTask.class, new AbstractElementAdapter());
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"971547dc-a711-4a4b-9f96-8d9b7a47abce\" name=\"Changes\" comment=\"fix &quot;Роман С добавил тесты&quot;\">\n      <change afterPath=\"$PROJECT_DIR$/test/service/HttpTaskManagerTest.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/Main.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Main.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/api/HttpTaskServer.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/api/HttpTaskServer.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/api/KVServer.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/api/KVServer.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/save.txt\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/save.txt\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/service/HTTPTaskManager.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/service/HttpTaskManager.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/service/KVTaskClient.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/service/KVTaskClient.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/service/Managers.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/service/Managers.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/test/api/HttpTaskServerTest.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/test/api/HttpTaskServerTest.java\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/test/service/HTTPTaskManagerTest.java\" beforeDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"CoverageOptionsProvider\">\n    <option name=\"myAddOrReplace\" value=\"0\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Enum\" />\n        <option value=\"JUnit5 Test Class\" />\n        <option value=\"Class\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"PUSH_AUTO_UPDATE\" value=\"true\" />\n    <option name=\"PUSH_TAGS\">\n      <GitPushTagMode>\n        <option name=\"argument\" value=\"--tags\" />\n        <option name=\"title\" value=\"All\" />\n      </GitPushTagMode>\n    </option>\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$/..\" />\n  </component>\n  <component name=\"GitSEFilterConfiguration\">\n    <file-type-list>\n      <filtered-out-file-type name=\"LOCAL_BRANCH\" />\n      <filtered-out-file-type name=\"REMOTE_BRANCH\" />\n      <filtered-out-file-type name=\"TAG\" />\n      <filtered-out-file-type name=\"COMMIT_BY_MESSAGE\" />\n    </file-type-list>\n  </component>\n  <component name=\"HighlightingSettingsPerFile\">\n    <setting file=\"file://$PROJECT_DIR$/service/FileBackedTasksManagerLoader.java\" root0=\"SKIP_INSPECTION\" />\n  </component>\n  <component name=\"MarkdownSettingsMigration\">\n    <option name=\"stateVersion\" value=\"1\" />\n  </component>\n  <component name=\"ProjectId\" id=\"26uublcDGlUfOYkZITzXm89NN5V\" />\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\n  </component>\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">\n    <property name=\"ASKED_ADD_EXTERNAL_FILES\" value=\"true\" />\n    <property name=\"ASKED_SHARE_PROJECT_CONFIGURATION_FILES\" value=\"true\" />\n    <property name=\"Downloaded.Files.Path.Enabled\" value=\"true\" />\n    <property name=\"Repository.Attach.Annotations\" value=\"false\" />\n    <property name=\"Repository.Attach.JavaDocs\" value=\"false\" />\n    <property name=\"Repository.Attach.Sources\" value=\"false\" />\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\n    <property name=\"SHARE_PROJECT_CONFIGURATION_FILES\" value=\"true\" />\n    <property name=\"SONARLINT_PRECOMMIT_ANALYSIS\" value=\"true\" />\n    <property name=\"com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrary\" value=\"JUnit5\" />\n    <property name=\"com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrarySuperClass.JUnit5\" value=\"\" />\n    <property name=\"create.test.in.the.same.root\" value=\"true\" />\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$\" />\n    <property name=\"project.structure.last.edited\" value=\"Modules\" />\n    <property name=\"project.structure.proportion\" value=\"0.0\" />\n    <property name=\"project.structure.side.proportion\" value=\"0.2\" />\n  </component>\n  <component name=\"RecentsManager\">\n    <key name=\"CreateTestDialog.Recents.Supers\">\n      <recent name=\"\" />\n      <recent name=\"abstract class TaskManagerTest&lt;T extends TaskManager&gt;\" />\n    </key>\n    <key name=\"CreateTestDialog.RecentsKey\">\n      <recent name=\"service\" />\n      <recent name=\"model\" />\n    </key>\n  </component>\n  <component name=\"RunManager\" selected=\"Application.Main\">\n    <configuration name=\"FileBackedTasksManager\" type=\"Application\" factoryName=\"Application\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"service.FileBackedTasksManager\" />\n      <module name=\"java-sprint2-hw\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"Main\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\n      <option name=\"MAIN_CLASS_NAME\" value=\"Main\" />\n      <module name=\"java-sprint2-hw\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"FileBackedTasksManagerTest and 2 more\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"java-sprint2-hw\" />\n      <extension name=\"coverage\">\n        <pattern>\n          <option name=\"PATTERN\" value=\"test.service.*\" />\n          <option name=\"ENABLED\" value=\"true\" />\n        </pattern>\n      </extension>\n      <option name=\"PACKAGE_NAME\" value=\"test.service\" />\n      <option name=\"MAIN_CLASS_NAME\" value=\"test.service.TaskManagerTest\" />\n      <option name=\"TEST_OBJECT\" value=\"pattern\" />\n      <patterns>\n        <pattern testClass=\"test.service.FileBackedTasksManagerTest\" />\n        <pattern testClass=\"test.service.HttpTaskManagerTest\" />\n        <pattern testClass=\"test.service.InMemoryTaskManagerTest\" />\n      </patterns>\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"HistoryManagerTest\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"java-sprint2-hw\" />\n      <extension name=\"coverage\">\n        <pattern>\n          <option name=\"PATTERN\" value=\"test.service.*\" />\n          <option name=\"ENABLED\" value=\"true\" />\n        </pattern>\n      </extension>\n      <option name=\"PACKAGE_NAME\" value=\"test.service\" />\n      <option name=\"MAIN_CLASS_NAME\" value=\"test.service.HistoryManagerTest\" />\n      <option name=\"TEST_OBJECT\" value=\"class\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"HttpTaskManagerTest\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"java-sprint2-hw\" />\n      <extension name=\"coverage\">\n        <pattern>\n          <option name=\"PATTERN\" value=\"test.service.*\" />\n          <option name=\"ENABLED\" value=\"true\" />\n        </pattern>\n      </extension>\n      <option name=\"PACKAGE_NAME\" value=\"test.service\" />\n      <option name=\"MAIN_CLASS_NAME\" value=\"test.service.HttpTaskManagerTest\" />\n      <option name=\"TEST_OBJECT\" value=\"class\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration name=\"HttpTaskServerTest\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"java-sprint2-hw\" />\n      <extension name=\"coverage\">\n        <pattern>\n          <option name=\"PATTERN\" value=\"test.api.*\" />\n          <option name=\"ENABLED\" value=\"true\" />\n        </pattern>\n      </extension>\n      <option name=\"PACKAGE_NAME\" value=\"test.api\" />\n      <option name=\"MAIN_CLASS_NAME\" value=\"test.api.HttpTaskServerTest\" />\n      <option name=\"TEST_OBJECT\" value=\"class\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"Application.Main\" />\n        <item itemvalue=\"JUnit.HttpTaskManagerTest\" />\n        <item itemvalue=\"JUnit.HttpTaskServerTest\" />\n        <item itemvalue=\"JUnit.FileBackedTasksManagerTest and 2 more\" />\n        <item itemvalue=\"JUnit.FileBackedTasksManagerTest and 2 more\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"971547dc-a711-4a4b-9f96-8d9b7a47abce\" name=\"Changes\" comment=\"\" />\n      <created>1648285866093</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1648285866093</updated>\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"feat &quot;Роман С добавил новую историю&quot;\">\n      <created>1648396783489</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1648396783489</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"fix &quot;Роман С переставил классы в другие пакеты&quot;\">\n      <created>1648485897031</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1648485897031</updated>\n    </task>\n    <task id=\"LOCAL-00003\" summary=\"fix &quot;Роман С поменял модификаторы на приват&quot;\">\n      <created>1648564842729</created>\n      <option name=\"number\" value=\"00003\" />\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1648564842729</updated>\n    </task>\n    <task id=\"LOCAL-00004\" summary=\"feat &quot;Роман С добавил память&quot;\">\n      <created>1650400247260</created>\n      <option name=\"number\" value=\"00004\" />\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1650400247260</updated>\n    </task>\n    <task id=\"LOCAL-00005\" summary=\"feat &quot;Роман С добавил память&quot;\">\n      <created>1650400396548</created>\n      <option name=\"number\" value=\"00005\" />\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1650400396548</updated>\n    </task>\n    <task id=\"LOCAL-00006\" summary=\"feat &quot;Роман С добавил память&quot;\">\n      <created>1650400417421</created>\n      <option name=\"number\" value=\"00006\" />\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1650400417421</updated>\n    </task>\n    <task id=\"LOCAL-00007\" summary=\"fix &quot;Роман С исправил модификаторы, перенес статики&quot;\">\n      <created>1650549991469</created>\n      <option name=\"number\" value=\"00007\" />\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1650549991469</updated>\n    </task>\n    <task id=\"LOCAL-00008\" summary=\"fix &quot;Роман С добавил постоянные, убрал метод toString&quot;\">\n      <created>1650628414850</created>\n      <option name=\"number\" value=\"00008\" />\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1650628414850</updated>\n    </task>\n    <task id=\"LOCAL-00009\" summary=\"fix &quot;Роман С добавил постоянные, убрал метод toString&quot;\">\n      <created>1650806382580</created>\n      <option name=\"number\" value=\"00009\" />\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1650806382580</updated>\n    </task>\n    <task id=\"LOCAL-00010\" summary=\"fix &quot;Роман С добавил тесты&quot;\">\n      <created>1652607578179</created>\n      <option name=\"number\" value=\"00010\" />\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1652607578179</updated>\n    </task>\n    <task id=\"LOCAL-00011\" summary=\"fix &quot;Роман С добавил тесты&quot;\">\n      <created>1652715005135</created>\n      <option name=\"number\" value=\"00011\" />\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1652715005135</updated>\n    </task>\n    <task id=\"LOCAL-00012\" summary=\"fix &quot;Роман С добавил тесты&quot;\">\n      <created>1652715024160</created>\n      <option name=\"number\" value=\"00012\" />\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1652715024160</updated>\n    </task>\n    <task id=\"LOCAL-00013\" summary=\"fix &quot;Роман С добавил тесты&quot;\">\n      <created>1652715265785</created>\n      <option name=\"number\" value=\"00013\" />\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1652715265785</updated>\n    </task>\n    <task id=\"LOCAL-00014\" summary=\"fix &quot;Роман С добавил тесты&quot;\">\n      <created>1652797057904</created>\n      <option name=\"number\" value=\"00014\" />\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1652797057904</updated>\n    </task>\n    <task id=\"LOCAL-00015\" summary=\"fix &quot;Роман С добавил тесты&quot;\">\n      <created>1652797089359</created>\n      <option name=\"number\" value=\"00015\" />\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1652797089359</updated>\n    </task>\n    <task id=\"LOCAL-00016\" summary=\"fix &quot;Роман С добавил тесты&quot;\">\n      <created>1652804235125</created>\n      <option name=\"number\" value=\"00016\" />\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1652804235125</updated>\n    </task>\n    <task id=\"LOCAL-00017\" summary=\"fix &quot;Роман С добавил тесты&quot;\">\n      <created>1652883252980</created>\n      <option name=\"number\" value=\"00017\" />\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1652883252980</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"18\" />\n    <servers />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\n    <MESSAGE value=\"feat &quot;Роман С добавил новую историю&quot;\" />\n    <MESSAGE value=\"fix &quot;Роман С переставил классы в другие пакеты&quot;\" />\n    <MESSAGE value=\"fix &quot;Роман С поменял модификаторы на приват&quot;\" />\n    <MESSAGE value=\"feat &quot;Роман С добавил память&quot;\" />\n    <MESSAGE value=\"fix &quot;Роман С исправил модификаторы, перенес статики&quot;\" />\n    <MESSAGE value=\"fix &quot;Роман С добавил постоянные, убрал метод toString&quot;\" />\n    <MESSAGE value=\"fix &quot;Роман С добавил тесты&quot;\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"fix &quot;Роман С добавил тесты&quot;\" />\n    <option name=\"GROUP_MULTIFILE_MERGE_BY_DIRECTORY\" value=\"true\" />\n  </component>\n  <component name=\"XDebuggerManager\">\n    <breakpoint-manager>\n      <breakpoints>\n        <line-breakpoint enabled=\"true\" type=\"java-method\">\n          <url>file://$PROJECT_DIR$/api/HttpTaskServer.java</url>\n          <line>184</line>\n          <properties class=\"api.HttpTaskServer\" method=\"postEpic\">\n            <option name=\"EMULATED\" value=\"true\" />\n            <option name=\"WATCH_EXIT\" value=\"false\" />\n          </properties>\n          <option name=\"timeStamp\" value=\"49\" />\n        </line-breakpoint>\n      </breakpoints>\n    </breakpoint-manager>\n  </component>\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\n    <SUITE FILE_PATH=\"coverage/src$Main.ic\" NAME=\"Main Coverage Results\" MODIFIED=\"1650386221657\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"idea\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" />\n    <SUITE FILE_PATH=\"coverage/src$EpicTest.ic\" NAME=\"EpicTest Coverage Results\" MODIFIED=\"1652372463666\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"idea\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\">\n      <FILTER>model.*</FILTER>\n    </SUITE>\n    <SUITE FILE_PATH=\"coverage/src$FileBackedTasksManagerTest.ic\" NAME=\"FileBackedTasksManagerTest Coverage Results\" MODIFIED=\"1652606872930\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"idea\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\">\n      <FILTER>service.*</FILTER>\n    </SUITE>\n    <SUITE FILE_PATH=\"coverage/src$EpicTest_shouldCalculateStatusNewAllSubtasksNew.ic\" NAME=\"EpicTest.shouldCalculateStatusNewAllSubtasksNew Coverage Results\" MODIFIED=\"1652377568717\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"idea\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\">\n      <FILTER>model.*</FILTER>\n    </SUITE>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 7092b805663452d17e3cd4a3d78b4891dcb74bf3)
+++ b/.idea/workspace.xml	(date 1653985350238)
@@ -1,18 +1,11 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="ChangeListManager">
-    <list default="true" id="971547dc-a711-4a4b-9f96-8d9b7a47abce" name="Changes" comment="fix &quot;Роман С добавил тесты&quot;">
-      <change afterPath="$PROJECT_DIR$/test/service/HttpTaskManagerTest.java" afterDir="false" />
+    <list default="true" id="971547dc-a711-4a4b-9f96-8d9b7a47abce" name="Changes" comment="fix &quot;Роман С ремонт кода&quot;">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Main.java" beforeDir="false" afterPath="$PROJECT_DIR$/Main.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/api/HttpTaskServer.java" beforeDir="false" afterPath="$PROJECT_DIR$/api/HttpTaskServer.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/api/KVServer.java" beforeDir="false" afterPath="$PROJECT_DIR$/api/KVServer.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/save.txt" beforeDir="false" afterPath="$PROJECT_DIR$/save.txt" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/service/HTTPTaskManager.java" beforeDir="false" afterPath="$PROJECT_DIR$/service/HttpTaskManager.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/service/HttpTaskManager.java" beforeDir="false" afterPath="$PROJECT_DIR$/service/HttpTaskManager.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/service/KVTaskClient.java" beforeDir="false" afterPath="$PROJECT_DIR$/service/KVTaskClient.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/service/Managers.java" beforeDir="false" afterPath="$PROJECT_DIR$/service/Managers.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/test/api/HttpTaskServerTest.java" beforeDir="false" afterPath="$PROJECT_DIR$/test/api/HttpTaskServerTest.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/test/service/HTTPTaskManagerTest.java" beforeDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -39,6 +32,11 @@
         <option name="title" value="All" />
       </GitPushTagMode>
     </option>
+    <option name="RECENT_BRANCH_BY_REPOSITORY">
+      <map>
+        <entry key="$PROJECT_DIR$/.." value="main" />
+      </map>
+    </option>
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$/.." />
   </component>
   <component name="GitSEFilterConfiguration">
@@ -92,7 +90,7 @@
       <recent name="model" />
     </key>
   </component>
-  <component name="RunManager" selected="Application.Main">
+  <component name="RunManager" selected="JUnit.HttpTaskServerTest">
     <configuration name="FileBackedTasksManager" type="Application" factoryName="Application" nameIsGenerated="true">
       <option name="MAIN_CLASS_NAME" value="service.FileBackedTasksManager" />
       <module name="java-sprint2-hw" />
@@ -174,11 +172,11 @@
     </configuration>
     <recent_temporary>
       <list>
-        <item itemvalue="Application.Main" />
-        <item itemvalue="JUnit.HttpTaskManagerTest" />
         <item itemvalue="JUnit.HttpTaskServerTest" />
         <item itemvalue="JUnit.FileBackedTasksManagerTest and 2 more" />
         <item itemvalue="JUnit.FileBackedTasksManagerTest and 2 more" />
+        <item itemvalue="Application.Main" />
+        <item itemvalue="JUnit.HttpTaskManagerTest" />
       </list>
     </recent_temporary>
   </component>
@@ -310,7 +308,14 @@
       <option name="project" value="LOCAL" />
       <updated>1652883252980</updated>
     </task>
-    <option name="localTasksCounter" value="18" />
+    <task id="LOCAL-00018" summary="fix &quot;Роман С ремонт кода&quot;">
+      <created>1653922253660</created>
+      <option name="number" value="00018" />
+      <option name="presentableId" value="LOCAL-00018" />
+      <option name="project" value="LOCAL" />
+      <updated>1653922253660</updated>
+    </task>
+    <option name="localTasksCounter" value="19" />
     <servers />
   </component>
   <component name="Vcs.Log.Tabs.Properties">
@@ -333,7 +338,8 @@
     <MESSAGE value="fix &quot;Роман С исправил модификаторы, перенес статики&quot;" />
     <MESSAGE value="fix &quot;Роман С добавил постоянные, убрал метод toString&quot;" />
     <MESSAGE value="fix &quot;Роман С добавил тесты&quot;" />
-    <option name="LAST_COMMIT_MESSAGE" value="fix &quot;Роман С добавил тесты&quot;" />
+    <MESSAGE value="fix &quot;Роман С ремонт кода&quot;" />
+    <option name="LAST_COMMIT_MESSAGE" value="fix &quot;Роман С ремонт кода&quot;" />
     <option name="GROUP_MULTIFILE_MERGE_BY_DIRECTORY" value="true" />
   </component>
   <component name="XDebuggerManager">
